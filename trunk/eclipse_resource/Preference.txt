http://www.eclipse.org/eclipse/platform-core/documents/user_settings/faq.html#whatIs

Preference:
Scope:A scope basically refers to where the preferences are stored
IScopeContent:
1. Project Scope    (linked with project) 	
2. Instance Scope   (related to workspace, in 2.1 and before, only instance scope.)
3. Configuration Scope  (related to )
4. Default Scope    (no persistent)


PreferencesService:
return (IEclipsePreferences) PreferencesService.getDefault().getRootNode().node(getName()).node(qualifier);


What scopes are contributed by the Platform?
INSTANCE - The instance scope can also be thought of as "workspace". That is, the preferences which are stored in this scope are stored per workspace, or per running instance of Eclipse. This scope corresponds to the default location of preferences in Eclipse 2.1. The instance area is derived from the location returned by org.eclipse.core.runtime.Platform#getInstanceLocation(). Preferences stored in this scope will not be available to other running instances of Eclipse. 
ONFIGURATION - The configuration scope is used to store preferences on a per configuration level. Being able store preferences per configuration means that all workspaces share the same preferences. For instance, if you are an Eclipse developer and you have a single Eclipse install but you have multiple workspaces for different projects/branches that you are working on, the preferences stored in the configuration scope will be shared between these workspaces. The configuration area is derived from the location returned by org.eclipse.core.runtime.Platform#getConfigurationLocation(). 

DEFAULT - The default preference scope was initially created to provide a backwards compatibility story for the plug-in customization code in Eclipse 2.1. Preferences stored in the default scope are not persisted to disk and are a part of the plug-in customization story.

PROJECT - There was a request for per project preferences so the project scope handles this. Preferences which are stored in this scope are shared stored in the project content area and are therefore automatically shared with the repository. This enables items like java compiler settings to be shared between team members working on the same project.  




Platform.getPreferencesService();
 PreferencesService.getDefault().


Setting a value using the new code is a bit more complicated. Clients must know which scope they wish to store their value in. For instance:
  Preferences node = new InstanceScope().getNode(ResourcesPlugin.PI_RESOURCES);
  if (node != null)
    node.put(key, value);


